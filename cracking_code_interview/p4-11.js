/*

삽입, 검색, 삭제, 임의의 노드 반환. getRandomNode().

모든 노드를 같은 확률로 선택해준다.

이 같은 확률이라는게 뭐냐? N번 부르면 N개가 무조건 한번씩은 나와야 하는거냐? 아니면 매 매소드 호출은 독립 시행으로서 개별 노드가 뽑힐 확률이 1/N이면 되는거냐?

노드의 갯수를 정확히 알고 있다면 (Size),

getRandomNode가 매우 자주 불리는게 아니라면

getRandomNode는 0 ~ (Size-1) 사이의 숫자 i를 선택해서

pre-order로 순회하면서 i번째 만나는 노드를 반환하면 될 것 같다.

side-channel timing attack 같은 걸 막기 위해 항상 동일 시간 안에 동작을 보장하고 싶으면

pre-order를 무조건 끝까지 순회하도록 하는 방법도 있긴하다.

이 방법은 시간 복잡도를 O(N)으로 포기하는 대신 공간 복잡도가 O(1)이고,

삽입, 검색, 삭제, getRandomNode의 중요도, 어느게 더 많이 불릴 지를 정해야 한다.


getRandomNode에 초점을 맞춰서 pre-order로 순회를 하지 않고 i번째 노드를 빠르게 선택하는 방법은

이진 트리를 complete binary tree로 만드는 거다.

그러면 i번째 자식의 왼쪽 노드는 2i 번째 노드가 되고 오른쪽은 2i+1 번째 노드가 된다.

그래서 숫자를 1 ~ size로 픽 한 다음에 이 정보를 기준으로 왼쪽 오른쪽을 선택해나가면 된다.

9가 주어지면
4 * 2 +1 이니 r
2 * 2   이니 l
1 * 2   이니 l
1 이니 종료.

루트에서 l l r 로 이동해서 선택하면 된다.

이러면 O(log N)의 시간이 걸리고 O(log N)의 메모리가 사용된다.


*/
