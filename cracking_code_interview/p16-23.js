/*
rand5 이용해서 rand7 구현.

0 ~ 4 반환 => 0 ~ 6 반환.

1/5 2/5 3/5 4/5

두번 호출하면 25가지 조합이 같은 확율로 나옴.

[0, 0], [0, 1], ... [0, 4],
[1, 0], [1, 1] .... [1, 4],

앞에서 부터 각각 3개씩 해서 21개는 0~6에 맵핑하고 남은 4개일 경우, 처음부터 다시 한다.

이론적으로 무한루프가 있을 수 있지만, 평균적으로 Sum n * (21/25)^(n-1) * (4/25) 의 호출횟수 안에 응답이 나온다.

0 ~ 34를 각각이 1/35 이 나오도록 한 다음에, 5로 나눈 몫을 반환.

*/

function rand5() {
}

function pseudoRand7() {
  let pick = rand5() * 5 + rand5();
  if (pick > 20) {
    return pseudoRand7();
  }
  return pick / 3 | 0;
}

/*
루프횟수를 좀 더 줄이려면? rand5 호출 횟수를 눌리면 된다.

3번 호출하면 125 % 7 = 6. 실패 확률을 6 / 125 로 줄일 수 있다.
*/


/*

루프 없이 결정론 적으로 풀려면.
지금처럼 잔여를 버리지 않고 풀 수 있나?
가능하다면, 한 요소의 확율은 x/5 의 곱으로 표현될텐데, 5와 7은 서로소라서 이걸로 1/7을 만들어 낼 수가 없다.
따라서 불가능한 것 아닐까?
*/
